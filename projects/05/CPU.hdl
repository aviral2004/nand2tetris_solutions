// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        // is an A - instruction
        Not(in=instruction[15], out=isA);

        // Address Register
        And(a=instruction[5], b=instruction[15], out=aAnd);
        Or(a=aAnd, b=isA, out=aLoad);
        Mux16(a=instruction, b=ALUOut, sel=aAnd, out=addrIn);
        ARegister(in=addrIn, load=aLoad, out=addressOut, out[0..14]=addressM);

        // Data Register
        And(a=instruction[15], b=instruction[4], out=dataSel);
        DRegister(in=ALUOut, load=dataSel, out=dataOut);

        // ALU
        Mux16(a=addressOut, b=inM, sel=instruction[12], out=outAorM);
        ALU(
            x=dataOut, 
            y=outAorM, 
            zx=instruction[11], 
            nx=instruction[10], 
            zy=instruction[9], 
            ny=instruction[8], 
            f=instruction[7], 
            no=instruction[6], 
            out=ALUOut,
            out = outM,
            zr=zrOut, 
            ng=ngOut
        );


        // PC

        // j1 test
        And(a=ngOut, b=instruction[2], out=isNegative);

        // j2 test
        And(a=zrOut, b=instruction[1], out=isZero);

        // j3 test
        Or(a=ngOut, b=zrOut, out=j3And);
        Not(in=j3And, out=j3Not);
        And(a=j3Not, b=instruction[0], out=isPositive);

        // Whether to jump or not
        // testing j1, j2 and j3 together
        Or(a=isNegative, b=isZero, out=jOr1);
        Or(a=jOr1, b=isPositive, out=jOr2);
        // C or A Instruction
        And(a=jOr2, b=instruction[15], out=jmp);

        // To write to M or not
        And(a=instruction[15], b=instruction[3], out=writeM);

        Not(in=jmp, out=inc);
        PC(in=addressOut, load=jmp, inc=inc, reset=reset, out[0..14]=pc);
}